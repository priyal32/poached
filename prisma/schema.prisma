datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String   @id @default(cuid())
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text()
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  recipes       Recipe[]
  role          String?   @default("user")
  displayName   String?
  accounts      Account[]
  sessions      Session[]
  username      String?   @unique
  password      String?   @map("hashed_password")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recipe {
  id                      String               @id @default(cuid())
  createdAt               DateTime             @default(now())
  convertedCooktimes      ConvertedCooktimes[]
  cookTime                String?
  cookTimeOriginalFormat  String?
  image                   String?
  name                    String
  prepTime                String?
  description             String?              @db.Text()
  prepTimeOriginalFormat  String?
  recipeIngredients       RecipeIngredients[]
  recipeInstructions      RecipeInstructions[]
  recipeYield             Int?
  totalTime               String?
  totalTimeOriginalFormat String?
  url                     String?
  User                    User?                @relation(fields: [userId], references: [id])
  userId                  String?

  @@unique([id])
  @@index([userId])
}

model ConvertedCooktimes {
  id       String
  type     String
  value    Int
  Recipe   Recipe? @relation(fields: [recipeId], references: [id])
  recipeId String?

  @@unique([id])
  @@index([recipeId])
}

model RecipeIngredients {
  id       String
  item     String  @db.Text()
  Recipe   Recipe? @relation(fields: [recipeId], references: [id])
  recipeId String?

  @@unique([id])
  @@index([recipeId])
}

model RecipeInstructions {
  id       String
  item     String  @db.Text()
  Recipe   Recipe? @relation(fields: [recipeId], references: [id])
  recipeId String?

  @@unique([id])
  @@index([recipeId])
}
